generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING_SHADOW")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  user      User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now()) @db.Timestamptz()
  updatedAt     DateTime  @updatedAt @db.Timestamptz()
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Gig {
  id                  String     @id @unique @default(cuid())
  client              Client?    @relation(fields: [clientId], references: [id])
  clientId            String?
  serial              Int?       @default(autoincrement())
  calendarId          String?
  driver              Source?    @relation("sourceOfDriver", fields: [driverId], references: [id])
  driverId            String?
  mrsSanta            Source?    @relation("sourceOfMrsSanta", fields: [mrsSantaId], references: [id])
  mrsSantaId          String?
  santa               Source?    @relation("sourceOfSanta", fields: [santaId], references: [id])
  santaId             String?
  contactEmail        String?    @default("")
  contactName         String?
  contactPhoneCell    String?
  contactPhoneLand    String?
  gigDate             DateTime?  @db.Timestamptz()
  invoiceNumber       String?
  notesGig            String?
  notesVenue          String?
  amountPaid          Decimal?   @db.Money
  price               Decimal?   @db.Money
  timeEnd             DateTime?  @db.Timestamptz()
  timeStart           DateTime?  @db.Timestamptz()
  travelType          String?
  venueAddressCity    String?
  venueAddressName    String?
  venueAddressState   String?
  venueAddressStreet  String?
  venueAddressStreet2 String?
  venueAddressZip     String?
  venueType           VenueType?
  isSoftHold          Boolean?
  createdAt           DateTime?  @default(now()) @db.Timestamptz()
  createdBy           String?
  updatedAt           DateTime?  @updatedAt @db.Timestamptz()
  updatedBy           String?
}

model Client {
  id            String      @unique @default(cuid())
  client        String
  addressCity   String?
  addressState  String?
  addressStreet String?
  addressZip    String?
  clientType    ClientType?
  email         String?
  contact       String?
  notes         String?
  phoneCell     String?
  phoneLandline String?
  source        String?
  status        String?
  createdAt     DateTime?   @default(now()) @db.Timestamptz()
  createdBy     String?
  updatedAt     DateTime?   @updatedAt() @db.Timestamptz()
  updatedBy     String?
  gigs          Gig[]
}

model Source {
  id                String        @id @default(cuid())
  nameFirst         String
  nameLast          String?
  addressCity       String?
  addressState      String?
  addressStreet     String?
  addressZip        String?
  costume           String?
  dob               DateTime?     @db.Date()
  email             String?
  entity            String?
  gender            Gender?
  gigMastersAccount String?
  calendarId        String?
  notes             String?
  phone             String?
  resource          String?
  role              String?
  ssn               String?
  status            SourceStatus?
  videoUrl          String?
  website           String?
  gigsDriver        Gig[]         @relation("sourceOfDriver")
  gigsMrsSanta      Gig[]         @relation("sourceOfMrsSanta")
  gigsSanta         Gig[]         @relation("sourceOfSanta")
  createdAt         DateTime?     @default(now()) @db.Timestamptz()
  createdBy         String?
  updatedAt         DateTime?     @updatedAt() @db.Timestamptz()
  updatedBy         String?
}

enum TravelType {
  Self
  PublicTransport
}

enum ClientType {
  Agency
  Booker
  Casting
  Corporation
  Country_Club
  Event_Party_Planner
  Fundraiser
  Government
  NGO
  Other
  Photographer
  Private
}

enum Gender {
  M
  F
}

enum SourceStatus {
  Active
  Driver
  Pending
  Inactive
  Independent
  Reference
  Supplier
  UNavailable
}

enum VenueType {
  Bar
  Event_Space
  Retail_Space
  Home
  Office
  Other
  Outdoors
  PhotoStudio
  Preschool
  PrivateClub
  Public
  PublicSpace
  Restaurant
  Retail
  Theatre
  TV_Studio
}
