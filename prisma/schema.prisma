generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING_SHADOW")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
}

model Gig {
  id         String  @id @unique @default(cuid())
  // id         String  @unique
  client     Client  @relation(fields: [clientId], references: [id])
  clientId   String
  serial     Int?    @default(autoincrement())
  calendarId String?

  driver     Source? @relation("sourceOfDriver", fields: [driverId], references: [id])
  driverId   String?
  mrsSanta   Source? @relation("sourceOfMrsSanta", fields: [mrsSantaId], references: [id])
  mrsSantaId String?
  santa      Source? @relation("sourceOfSanta", fields: [santaId], references: [id])
  santaId    String?

  contactEmail        String?
  contactName         String?
  contactPhoneCell    String?
  contactPhoneLand    String?
  date                DateTime @db.Date()
  invoiceNumber       String?
  notesGig            String?
  notesVenue          String?
  amountPaid          Decimal? @db.Money
  price               Decimal  @db.Money
  timeEnd             DateTime @db.Time()
  timeStart           DateTime @db.Time()
  travelType          String?
  venueAddressCity    String
  venueAddressName    String
  venueAddressState   String
  venueAddressStreet  String
  venueAddressStreet2 String?
  venueAddressZip     String?
  venueType           String
  isSoftHold          Boolean?

  createdAt DateTime? @default(now())
  createdBy String?
  updatedAt DateTime? @updatedAt
  updatedBy String?
}

model Client {
  id            String      @unique @default(cuid())
  client        String
  addressCity   String?
  addressState  String?
  addressStreet String?
  addressZip    String?
  clientType    ClientType?
  email         String?
  contact       String?
  notes         String?
  phoneCell     String?
  phoneLandline String?
  source        String?
  status        String?

  gigs Gig[]
}

model Source {
  id                String        @id @default(cuid())
  nameFirst         String
  nameLast          String?
  addressCity       String?
  addressState      String?
  addressStreet     String?
  addressZip        String?
  costume           String?
  dob               DateTime?     @db.Date()
  email             String?
  entity            String?
  gender            Gender?
  gigMastersAccount String?
  calendarId        String?
  notes             String?
  phone             String?
  resource          String?
  role              String?
  ssn               String?
  status            SourceStatus?
  videoUrl          String?
  website           String?

  gigsDriver   Gig[] @relation("sourceOfDriver")
  gigsMrsSanta Gig[] @relation("sourceOfMrsSanta")
  gigsSanta    Gig[] @relation("sourceOfSanta")

  createdAt DateTime?
  createdBy String?
  updatedAt DateTime?
  updatedBy String?
}

enum TravelType {
  Self
  PublicTransport
}

enum ClientType {
  Corporation
  Event_Party_Planner @map("Event/Party Planner")
  Booker
  Government
  Legal
  Photographer
  Casting
  Private
  other
}

enum Gender {
  M
  F
}

enum SourceStatus {
  Active
  Driver
  Inactive
  Independent
  Reference
  Supplier
  UNavailable
}
